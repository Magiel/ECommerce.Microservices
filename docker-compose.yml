version: '3.9'

services:
  # Microservices
  product-catalog-service:
    build:
      context: .
      dockerfile: src/ProductCatalogService/Dockerfile
    ports:
      - "8001:80"
      - "8002:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Otlp__Endpoint=http://otel-collector:4317
      - Zipkin__Endpoint=http://zipkin:9411/api/v2/spans
      - Jaeger__Host=jaeger
      - Jaeger__Port=6831
      - ServiceInfo__Name=ProductCatalogService
      - ServiceInfo__Version=1.0.0
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__System=Warning
      - Logging__Seq__ServerUrl=http://seq:5341
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
    depends_on:
      - otel-collector
      - zipkin
      - prometheus
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - product-logs:/app/logs

  order-processing-service:
    build:
      context: .
      dockerfile: src/OrderProcessingService/Dockerfile
    ports:
      - "8003:80"
      - "8004:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Otlp__Endpoint=http://otel-collector:4317
      - Zipkin__Endpoint=http://zipkin:9411/api/v2/spans
      - Jaeger__Host=jaeger
      - Jaeger__Port=6831
      - ServiceInfo__Name=OrderProcessingService
      - ServiceInfo__Version=1.0.0
      - ServiceUrls__ProductCatalogService=http://product-catalog-service:80
      - ServiceUrls__InventoryManagementService=http://inventory-management-service:80
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__System=Warning
      - Logging__Seq__ServerUrl=http://seq:5341
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
    depends_on:
      - product-catalog-service
      - inventory-management-service
      - otel-collector
      - zipkin
      - prometheus
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - order-logs:/app/logs

  inventory-management-service:
    build:
      context: .
      dockerfile: src/InventoryManagementService/Dockerfile
    ports:
      - "8005:80"
      - "8006:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Otlp__Endpoint=http://otel-collector:4317
      - Zipkin__Endpoint=http://zipkin:9411/api/v2/spans
      - Jaeger__Host=jaeger
      - Jaeger__Port=6831
      - ServiceInfo__Name=InventoryManagementService
      - ServiceInfo__Version=1.0.0
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__System=Warning
      - Logging__Seq__ServerUrl=http://seq:5341
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
    depends_on:
      - otel-collector
      - zipkin
      - prometheus
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - inventory-logs:/app/logs

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus exporter
      - "8888:8888"   # Metrics endpoint
      - "9464:9464"   # Prometheus exporter
      - "55680:55680" # Legacy OpenCensus receiver
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:13133/"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - jaeger
      - zipkin
      - prometheus

  # Jaeger for distributed tracing visualization
  jaeger:
    image: jaegertracing/all-in-one:1.59.0
    container_name: jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "6831:6831/udp" # Jaeger Thrift compact protocol (UDP)
      - "6832:6832/udp" # Jaeger Thrift binary protocol (UDP)
      - "14250:14250"   # Model used by jaeger
      - "14268:14268"   # Jaeger HTTP collector
      - "4317:4317"     # OTLP gRPC receiver
      - "4318:4318"     # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_GRPC_HOST_PORT=:4317
      - COLLECTOR_OTLP_HTTP_HOST_PORT=:4318
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    networks:
      - ecommerce-network
    volumes:
      - jaeger-data:/badger
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zipkin as an alternative tracing backend
  zipkin:
    image: openzipkin/zipkin:2.26
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-admin-api"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    depends_on:
      - product-catalog-service
      - order-processing-service
      - inventory-management-service
      - otel-collector

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ecommerce-network

  # Seq for log storage and analysis
  seq:
    image: datalust/seq:2023
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - seq-data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Elasticsearch initializericsearch for log aggregation
  elasticsearch-init:
    build:elastic.co/elasticsearch/elasticsearch:8.9.0
      context: ./elasticsearch    container_name: elasticsearch
      dockerfile: Dockerfileronment:
    container_name: elasticsearch-initery.type=single-node
    networks:.memory_lock=true
      - ecommerce-networkPTS=-Xms512m -Xmx512m"
    depends_on:urity.enabled=false
      elasticsearch:ck.security.enrollment.enabled=false
        condition: service_healthyame=docker-cluster
      kibana:
        condition: service_healthy
    restart: on-failure -1

networks:
  ecommerce-network:arch-data:/usr/share/elasticsearch/data
    driver: bridge    ports:















    driver: local  inventory-logs:    driver: local  order-logs:    driver: local  product-logs:    driver: local  seq-data:    driver: local  prometheus-data:    driver: local  jaeger-data:volumes:      - "9200:9200"
      - "9300:9300"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"yellow\"\\|\"status\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.local
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  ecommerce-network:
    driver: bridge

volumes:
  jaeger-data:
    driver: local
  prometheus-data:
    driver: local
  seq-data:
    driver: local
  product-logs:
    driver: local
  order-logs:
    driver: local
  inventory-logs:
    driver: local
  elasticsearch-data:
    driver: local
